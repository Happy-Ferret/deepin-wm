/* libbamf3.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Bamf", gir_namespace = "Bamf", gir_version = "0.2", lower_case_cprefix = "bamf_")]
namespace Bamf {
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_application_get_type ()")]
	public class Application : Bamf.View {
		[CCode (has_construct_function = false)]
		protected Application ();
		public unowned string get_application_type ();
		public unowned string get_desktop_file ();
		public bool get_show_menu_stubs ();
		public GLib.List<weak Bamf.Window> get_windows ();
		public GLib.Array<uint> get_xids ();
		public signal void window_added (Bamf.View object);
		public signal void window_removed (Bamf.View object);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_control_get_type ()")]
	public class Control : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Control ();
		public void insert_desktop_file (string desktop_file);
		public void register_application_for_pid (string application, int32 pid);
		public void register_tab_provider (string path);
		public void set_approver_behavior (int32 behavior);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_factory_get_type ()")]
	public class Factory : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Factory ();
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_indicator_get_type ()")]
	public class Indicator : Bamf.View {
		[CCode (has_construct_function = false)]
		protected Indicator ();
		public unowned string get_dbus_menu_path ();
		public unowned string get_remote_address ();
		public unowned string get_remote_path ();
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_matcher_get_type ()")]
	public class Matcher : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Matcher ();
		public bool application_is_running (string application);
		public unowned Bamf.Application get_active_application ();
		public unowned Bamf.Window get_active_window ();
		public unowned Bamf.Application get_application_for_desktop_file (string desktop_file_path, bool create_if_not_found);
		public unowned Bamf.Application get_application_for_window (Bamf.Window window);
		public unowned Bamf.Application get_application_for_xid (uint32 xid);
		public GLib.List<weak Bamf.Application> get_applications ();
		public static Bamf.Matcher get_default ();
		public GLib.List<weak Bamf.Application> get_running_applications ();
		public GLib.List<weak Bamf.View> get_tabs ();
		public GLib.List<weak Bamf.View> get_window_stack_for_monitor (int monitor);
		public GLib.List<weak Bamf.View> get_windows ();
		public GLib.Array<uint32> get_xids_for_application (string application);
		public void register_favorites ([CCode (array_length = false)] string[] favorites);
		public signal void active_application_changed (Bamf.View p0, Bamf.View p1);
		public signal void active_window_changed (Bamf.View p0, Bamf.View p1);
		public signal void stacking_order_changed ();
		public signal void view_closed (Bamf.View p0);
		public signal void view_opened (Bamf.View p0);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_tab_get_type ()")]
	public class Tab : Bamf.View {
		[CCode (has_construct_function = false)]
		public Tab (string id, string uri);
		public string get_id ();
		public string get_preview ();
		public string get_uri ();
		public void set_preview (string uri);
		public void set_uri (string uri);
		public virtual void show ();
		[NoAccessorMethod]
		public string id { owned get; set construct; }
		public string preview { owned get; set; }
		public string uri { owned get; set construct; }
		public virtual signal void preview_updated ();
		public virtual signal void uri_changed (string new_uri, string p0);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_tab_source_get_type ()")]
	public class TabSource : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TabSource ();
		public string get_tab_uri (string tab_id);
		public uint32 get_tab_xid (string tab_id);
		[NoWrapper]
		public virtual string tab_uri (string tab_id);
		[NoWrapper]
		public virtual uint32 tab_xid (string tab_id);
		[NoAccessorMethod]
		public string id { owned get; set construct; }
		public signal void tab_closed (string object);
		public signal void tab_opened (string object);
		public signal void tab_uri_changed (string object, string p0, string p1);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_view_get_type ()")]
	public class View : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected View ();
		[NoWrapper]
		public virtual Bamf.ClickBehavior click_behavior ();
		public virtual GLib.List<weak Bamf.View> get_children ();
		public Bamf.ClickBehavior get_click_suggestion ();
		public virtual string get_icon ();
		public virtual string get_name ();
		[CCode (vfunc_name = "view_type")]
		public virtual unowned string get_view_type ();
		public virtual bool is_active ();
		public bool is_closed ();
		public virtual bool is_running ();
		public bool is_sticky ();
		public virtual bool is_urgent ();
		[CCode (cname = "bamf_view_user_visible")]
		public bool is_user_visible ();
		[NoWrapper]
		public virtual void set_path (string path);
		public void set_sticky (bool value);
		[NoAccessorMethod]
		public bool active { get; }
		[NoAccessorMethod]
		public string path { owned get; }
		[NoAccessorMethod]
		public bool running { get; }
		[NoAccessorMethod]
		public bool urgent { get; }
		[NoAccessorMethod]
		public bool user_visible { get; }
		public virtual signal void active_changed (bool active);
		public virtual signal void child_added (Bamf.View child);
		public virtual signal void child_removed (Bamf.View child);
		public virtual signal void closed ();
		public virtual signal void name_changed (string old_name, string new_name);
		public virtual signal void running_changed (bool running);
		public virtual signal void urgent_changed (bool urgent);
		public virtual signal void user_visible_changed (bool user_visible);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", type_id = "bamf_window_get_type ()")]
	public class Window : Bamf.View {
		[CCode (has_construct_function = false)]
		protected Window ();
		public int get_monitor ();
		public uint32 get_pid ();
		public unowned Bamf.Window get_transient ();
		public string get_utf8_prop (string prop);
		public Bamf.WindowType get_window_type ();
		public uint32 get_xid ();
		public long last_active ();
		public Bamf.WindowMaximizationType maximized ();
		public virtual signal void maximized_changed (int old_value, int new_value);
		public virtual signal void monitor_changed (int old_value, int new_value);
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", cprefix = "BAMF_CLICK_BEHAVIOR_")]
	public enum ClickBehavior {
		NONE,
		OPEN,
		FOCUS,
		FOCUS_ALL,
		MINIMIZE,
		RESTORE,
		RESTORE_ALL,
		PICKER
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", cprefix = "BAMF_FACTORY_")]
	public enum FactoryViewType {
		VIEW,
		WINDOW,
		APPLICATION,
		INDICATOR,
		NONE
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", cprefix = "BAMF_WINDOW_")]
	public enum WindowMaximizationType {
		FLOATING,
		HORIZONTAL_MAXIMIZED,
		VERTICAL_MAXIMIZED,
		MAXIMIZED
	}
	[CCode (cheader_filename = "libbamf/libbamf.h", cprefix = "BAMF_WINDOW_")]
	public enum WindowType {
		NORMAL,
		DESKTOP,
		DOCK,
		DIALOG,
		TOOLBAR,
		MENU,
		UTILITY,
		SPLASHSCREEN
	}
}
